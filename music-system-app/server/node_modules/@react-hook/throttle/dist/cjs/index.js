'use strict'

exports.__esModule = true
exports.default = exports.useThrottle = exports.useThrottleCallback = void 0

var _react = _interopRequireDefault(require('react'))

var _requestTimeout = require('@essentials/request-timeout')

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj}
}

const {useEffect, useCallback, useState, useRef} = _react.default

const useThrottleCallback = (callback, fps = 30, leading = false) => {
  const nextTimeout = useRef(null),
    tailTimeout = useRef(null),
    calledLeading = useRef(false),
    wait = 1000 / fps // cleans up pending timeouts when the function changes

  function _ref() {
    if (nextTimeout.current !== null) {
      ;(0, _requestTimeout.clearRequestTimeout)(nextTimeout.current)
      nextTimeout.current = null
    }

    if (tailTimeout.current !== null) {
      ;(0, _requestTimeout.clearRequestTimeout)(tailTimeout.current)
      tailTimeout.current = null
    }

    calledLeading.current = false
  }

  useEffect(() => _ref, [callback, fps])
  return useCallback(
    function(...args) {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      const self = this

      function _ref2() {
        nextTimeout.current = null
        tailTimeout.current === null && (calledLeading.current = false)
        callback.apply(self, args)
      }

      function _ref3() {
        tailTimeout.current = null
        calledLeading.current = false
        nextTimeout.current === null && callback.apply(self, args)
      }

      if (nextTimeout.current === null) {
        const next = _ref2

        if (leading && !calledLeading.current) {
          // leading
          next()
          calledLeading.current = true
        } else {
          // head
          nextTimeout.current = (0, _requestTimeout.requestTimeout)(next, wait)
        }
      } else {
        // tail
        tailTimeout.current !== null &&
          (0, _requestTimeout.clearRequestTimeout)(tailTimeout.current)
        tailTimeout.current = (0, _requestTimeout.requestTimeout)(_ref3, wait)
      }
    },
    [callback, fps]
  )
}

exports.useThrottleCallback = useThrottleCallback

const useThrottle = (initialState, fps, leading) => {
  const _ref_0 = useState(initialState)

  const setState = _ref_0[1]
  const state = _ref_0[0]
  return [state, useThrottleCallback(setState, fps, leading)]
}

exports.useThrottle = useThrottle
var _default = useThrottle
exports.default = _default
