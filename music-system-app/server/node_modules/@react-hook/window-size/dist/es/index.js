import React from 'react'
const {useEffect} = React
import useDebounce from '@react-hook/debounce'
const emptyArr = []
const emptyObj = {}
export const useWindowSize = (
  initialWidth,
  initialHeight,
  options = emptyObj
) => {
  const {wait, leading} = options
  const [size, setDebouncedSize] = useDebounce(
    /* istanbul ignore next */
    typeof document === 'undefined'
      ? [initialWidth, initialHeight]
      : [
          document.documentElement.clientWidth,
          document.documentElement.clientHeight,
        ],
    wait,
    leading
  )

  function _ref() {
    return setDebouncedSize([
      document.documentElement.clientWidth,
      document.documentElement.clientHeight,
    ])
  }

  useEffect(() => {
    const setSize = _ref
    window.addEventListener('resize', setSize)
    window.addEventListener('orientationchange', setSize)
    return () => {
      window.removeEventListener('resize', setSize)
      window.removeEventListener('orientationchange', setSize)
    }
  }, emptyArr)
  return size
}
export const useWindowHeight = (initialValue = 0, options) =>
  useWindowSize(0, initialValue, options)[1]
export const useWindowWidth = (initialValue = 0, options) =>
  useWindowSize(initialValue, 0, options)[0]
export default useWindowSize
