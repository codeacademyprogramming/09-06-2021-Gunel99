'use strict'

exports.__esModule = true
exports.useTheme = exports.ThemeConsumer = exports.ThemeProvider = exports.useStylesContext = exports.ThemeContext = exports.StylesConsumer = exports.StylesContext = exports.createTheme = exports.mergeTheme = exports.getTheme = exports.baseTheme = exports.defaultBreakpoints = void 0

var _react = _interopRequireWildcard(require('react'))

var _array = _interopRequireDefault(require('empty/array'))

var _object = _interopRequireDefault(require('empty/object'))

var _json2mq = _interopRequireDefault(require('json2mq'))

var _trieMemoize = _interopRequireDefault(require('trie-memoize'))

var _core = require('@emotion/core')

var _utils = require('./utils')

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj}
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj
  } else {
    var newObj = {}
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc =
            Object.defineProperty && Object.getOwnPropertyDescriptor
              ? Object.getOwnPropertyDescriptor(obj, key)
              : {}
          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc)
          } else {
            newObj[key] = obj[key]
          }
        }
      }
    }
    newObj.default = obj
    return newObj
  }
}

const getMediaQuery = (0, _utils.fastMemoize)(
  'getMediaQuery',
  bp =>
    isNaN(bp) === false
      ? `only screen and (min-width: ${bp}px)`
      : typeof bp === 'string'
      ? bp
      : (0, _json2mq.default)(bp),
  Map
)
const defaultBreakpoints = {
  // 0px
  phone: 'only screen and (min-width: 0em)',
  // 560px
  tablet: 'only screen and (min-width: 35em)',
  // 1280px
  desktop: 'only screen and (min-width: 80em)',
}
exports.defaultBreakpoints = defaultBreakpoints
const baseTheme = {
  breakpoints: defaultBreakpoints,
  breakpointsDelimiter: ':',
}
exports.baseTheme = baseTheme

const throwThemeError = theme => {
  for (let key in baseTheme)
    if (theme[key] === void 0 || theme[key] === null || theme[key] === false)
      throw new ReferenceError(
        `Themes must include a global '${key}' property.`
      )
}

const parseBreakpoints = (0, _utils.fastMemoize)(
  'parseBreakpoints',
  breakpoints => {
    const parsed = {}

    for (let key in breakpoints) parsed[key] = getMediaQuery(breakpoints[key])

    return parsed
  },
  WeakMap
)
const merge = (0, _trieMemoize.default)([WeakMap, WeakMap], _utils.deepMerge)

const getTheme = (defaultTheme = _object.default, userTheme) => {
  if (userTheme === void 0) return defaultTheme
  else if (defaultTheme === _object.default) return userTheme
  return merge(defaultTheme, userTheme)
}

exports.getTheme = getTheme

const mergeTheme = (prevTheme, theme) => {
  theme = getTheme(prevTheme, theme)
  if (process.env.NODE_ENV !== 'production') throwThemeError(theme)
  theme.breakpoints = parseBreakpoints(theme.breakpoints)
  return theme
}

exports.mergeTheme = mergeTheme

const createTheme = theme => {
  let nextTheme = Object.assign({}, baseTheme, theme)
  if (process.env.NODE_ENV !== 'production') throwThemeError(nextTheme)
  nextTheme.breakpoints = parseBreakpoints(nextTheme.breakpoints)
  return nextTheme
}

exports.createTheme = createTheme

const StylesContext = _react.default.createContext()

exports.StylesContext = StylesContext
const StylesConsumer = StylesContext.Consumer
exports.StylesConsumer = StylesConsumer
const ThemeContext = _core.ThemeContext
exports.ThemeContext = ThemeContext

const useStylesContext = () => (0, _react.useContext)(StylesContext)

exports.useStylesContext = useStylesContext

const ThemeProvider = ({theme, children}) => {
  const [userTheme, setUserTheme] = (0, _react.useState)(() =>
      createTheme(theme)
    ),
    setTheme = (0, _react.useCallback)(
      nextUserTheme => setUserTheme(mergeTheme(userTheme, nextUserTheme)),
      [userTheme]
    ),
    replaceTheme = (0, _react.useCallback)(
      nextUserTheme => setUserTheme(createTheme(nextUserTheme)),
      _array.default
    )
  ;(0, _react.useEffect)(() => {
    replaceTheme(theme)
  }, [theme])
  const childContext = (0, _react.useMemo)(
    () => ({
      theme: Object.assign({}, userTheme),
      setTheme,
      replaceTheme,
    }),
    [userTheme, setTheme, replaceTheme]
  )
  return _react.default.createElement(ThemeContext.Provider, {
    value: childContext.theme,
    children: _react.default.createElement(StylesContext.Provider, {
      value: childContext,
      children: children,
    }),
  })
}

exports.ThemeProvider = ThemeProvider

const ThemeConsumer = props =>
  _react.default.createElement(ThemeContext.Consumer, {
    children: theme => props.children(props.name ? theme[props.name] : theme),
  })

exports.ThemeConsumer = ThemeConsumer

const useTheme = name => {
  const theme = (0, _react.useContext)(ThemeContext)
  return name === void 0 ? theme : theme[name]
}

exports.useTheme = useTheme

if (process.env.NODE_ENV !== 'production') {
  const PropTypes = require('prop-types')

  ThemeProvider.displayName = 'ThemeProvider'
  ThemeProvider.propTypes = {
    theme: PropTypes.object,
    children: PropTypes.element.isRequired,
  }
  ThemeConsumer.propTypes = {
    name: PropTypes.string,
    children: PropTypes.func.isRequired,
  }
}
