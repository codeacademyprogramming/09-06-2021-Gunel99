'use strict'

exports.__esModule = true
exports.fromLeft = exports.fromBottom = exports.fromRight = exports.fromTop = exports.whichVal = exports.isVisible = exports.isVisible_ = void 0

var _core = require('@emotion/core')

var _trieMemoize = _interopRequireDefault(require('trie-memoize'))

var _styles = require('../Fade/styles')

var _utils = require('../utils')

var dT = _interopRequireWildcard(require('./defaultTheme'))

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj
  } else {
    var newObj = {}
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc =
            Object.defineProperty && Object.getOwnPropertyDescriptor
              ? Object.getOwnPropertyDescriptor(obj, key)
              : {}
          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc)
          } else {
            newObj[key] = obj[key]
          }
        }
      }
    }
    newObj.default = obj
    return newObj
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj}
}

const transform = (0, _trieMemoize.default)([Map, Map, Map], (x, y, z) =>
  /*#__PURE__*/
  (0, _core.css)('transform:translate3d(', x, ',', y, ',', z, ');')
)

const isVisible_ =
    /*#__PURE__*/
    (0, _core.css)(_styles.baseIsVisible, ';transform:translate3d(0,0,0);'),
  isVisible = v => (v === true ? isVisible_ : _styles.baseIsNotVisible),
  whichVal = (v, ov, t, isVisible) =>
    isVisible === true
      ? 0
      : v === true
      ? `${ov}%`
      : (0, _utils.unit)(v, (0, _utils.get)(t.slide, 'distanceUnit', dT)),
  fromTop = (0, _utils.nullIfFalsy)((v, t, p) =>
    transform(
      0,
      `${whichVal(
        isNaN(v) || typeof v === 'boolean' ? v : Number(v) * -1,
        -100,
        t,
        p.isVisible
      )}`,
      0
    )
  ),
  fromRight = (0, _utils.nullIfFalsy)((v, t, p) =>
    transform(`${whichVal(v, 100, t, p.isVisible)}`, 0, 0)
  ),
  fromBottom = (0, _utils.nullIfFalsy)((v, t, p) =>
    transform(0, `${whichVal(v, 100, t, p.isVisible)}`, 0)
  ),
  fromLeft = (0, _utils.nullIfFalsy)((v, t, p) =>
    transform(
      `${whichVal(
        isNaN(v) || typeof v === 'boolean' ? v : Number(v) * -1,
        -100,
        t,
        p.isVisible
      )}`,
      0,
      0
    )
  )

exports.fromLeft = fromLeft
exports.fromBottom = fromBottom
exports.fromRight = fromRight
exports.fromTop = fromTop
exports.whichVal = whichVal
exports.isVisible = isVisible
exports.isVisible_ = isVisible_
