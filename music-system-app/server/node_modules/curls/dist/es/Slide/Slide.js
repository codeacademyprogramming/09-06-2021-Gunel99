function _extends() {
  _extends =
    Object.assign ||
    function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i]
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key]
          }
        }
      }
      return target
    }
  return _extends.apply(this, arguments)
}

import {useStyles} from '@style-hooks/core'
import createRenderProp from '../createRenderProp'
import useToggleVisibility from '../useToggleVisibility'
import * as styles from './styles'

function _ref(props) {
  return useStyles('slide', styles, props)
}

export const useSlide = props =>
    useToggleVisibility(
      _ref,
      _extends(
        {
          property: 'visibility, transform',
        },
        props
      )
    ),
  Slide = createRenderProp(useSlide)

if (process.env.NODE_ENV !== 'production') {
  const propTypes = require('./propTypes').default

  Slide.displayName = 'Slide'
  Slide.propTypes = propTypes
}
