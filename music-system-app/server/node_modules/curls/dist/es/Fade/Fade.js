function _extends() {
  _extends =
    Object.assign ||
    function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i]
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key]
          }
        }
      }
      return target
    }
  return _extends.apply(this, arguments)
}

import {useStyles} from '@style-hooks/core'
import createRenderProp from '../createRenderProp'
import useToggleVisibility from '../useToggleVisibility'
import * as styles from './styles'

function _ref(props) {
  return useStyles('fade', styles, props)
}

export const useFade = props => {
    props = _extends(
      {
        property: 'visibility, opacity',
      },
      props
    )
    props.from = props.from || 0
    props.to = props.to === void 0 ? 1 : props.to
    return useToggleVisibility(_ref, props)
  },
  Fade = createRenderProp(useFade)

if (process.env.NODE_ENV !== 'production') {
  const propTypes = require('./propTypes').default

  Fade.displayName = 'Fade'
  Fade.propTypes = propTypes
}
